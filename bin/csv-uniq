#!/usr/bin/env ruby
# frozen_string_literal: true

require "csv"
require "dorian/arguments"

parsed =
  Dorian::Arguments.parse(
    headers: :boolean,
    print_headers: {
      alias: :p
    },
    version: {
      alias: :v
    },
    help: {
      alias: :h
    }
  )

abort parsed.help if parsed.options.help

if parsed.options.version
  abort File.read(File.expand_path("../../VERSION", __FILE__))
end

keys = parsed.arguments
keys = nil if keys.empty?
inputs = parsed.files.map { |file| File.read(file) }
inputs = [$stdin.each_line.to_a.map(&:strip).join("\n")] if inputs.empty?
headers = parsed.options.headers || parsed.options.print_headers
headers ||= keys&.any? { |key| key.to_i.to_s != key }

puts(
  CSV.generate do |output|
    rows =
      inputs.map.with_index do |input, index|
        input = CSV.parse(input, headers:)

        if parsed.options.print_headers && index.zero?
          output << (keys || input.headers).map do |key|
            if input.headers.include?(key)
              key
            elsif key.to_i.to_s == key
              input.headers[key.to_i]
            else
              key
            end
          end
        end

        input.map do |row|
          (
            keys || (headers && input.headers) || (0...input.first.size)
          ).map { |key| row[key.to_i.to_s == key ? key.to_i : key] }
        end
      end

    rows.flatten(1).uniq.each { |row| output << row }
  end
)
